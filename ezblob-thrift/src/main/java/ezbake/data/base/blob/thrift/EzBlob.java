/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.data.base.blob.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzBlob {

  public interface Iface extends ezbake.data.base.thrift.BaseDataService.Iface {

    public void putBlob(Blob entry, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public Set<ByteBuffer> getBlobs(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public int removeBlob(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public void copyBlob(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public String createBucket(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public void deleteBucket(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public boolean doesBucketExist(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public boolean doesBlobExist(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public List<ezbake.base.thrift.Visibility> getBlobVisibility(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public ezbake.base.thrift.Visibility getBucketVisibility(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public Set<String> listBuckets(ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public List<Blob> listBlobs(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public void setBucketVisibility(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

    public void setBlobVisibility(String bucketName, String key, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.data.base.thrift.BaseDataService .AsyncIface {

    public void putBlob(Blob entry, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBlobs(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeBlob(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void copyBlob(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createBucket(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBucket(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doesBucketExist(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doesBlobExist(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBlobVisibility(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBucketVisibility(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listBuckets(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listBlobs(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setBucketVisibility(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setBlobVisibility(String bucketName, String key, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.data.base.thrift.BaseDataService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void putBlob(Blob entry, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_putBlob(entry, security);
      recv_putBlob();
    }

    public void send_putBlob(Blob entry, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      putBlob_args args = new putBlob_args();
      args.setEntry(entry);
      args.setSecurity(security);
      sendBase("putBlob", args);
    }

    public void recv_putBlob() throws BlobException, org.apache.thrift.TException
    {
      putBlob_result result = new putBlob_result();
      receiveBase(result, "putBlob");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public Set<ByteBuffer> getBlobs(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_getBlobs(bucketName, key, security);
      return recv_getBlobs();
    }

    public void send_getBlobs(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getBlobs_args args = new getBlobs_args();
      args.setBucketName(bucketName);
      args.setKey(key);
      args.setSecurity(security);
      sendBase("getBlobs", args);
    }

    public Set<ByteBuffer> recv_getBlobs() throws BlobException, org.apache.thrift.TException
    {
      getBlobs_result result = new getBlobs_result();
      receiveBase(result, "getBlobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBlobs failed: unknown result");
    }

    public int removeBlob(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_removeBlob(bucketName, key, security);
      return recv_removeBlob();
    }

    public void send_removeBlob(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      removeBlob_args args = new removeBlob_args();
      args.setBucketName(bucketName);
      args.setKey(key);
      args.setSecurity(security);
      sendBase("removeBlob", args);
    }

    public int recv_removeBlob() throws BlobException, org.apache.thrift.TException
    {
      removeBlob_result result = new removeBlob_result();
      receiveBase(result, "removeBlob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeBlob failed: unknown result");
    }

    public void copyBlob(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_copyBlob(sourceBucketName, sourceKey, destinationBucketName, destinationKey, security);
      recv_copyBlob();
    }

    public void send_copyBlob(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      copyBlob_args args = new copyBlob_args();
      args.setSourceBucketName(sourceBucketName);
      args.setSourceKey(sourceKey);
      args.setDestinationBucketName(destinationBucketName);
      args.setDestinationKey(destinationKey);
      args.setSecurity(security);
      sendBase("copyBlob", args);
    }

    public void recv_copyBlob() throws BlobException, org.apache.thrift.TException
    {
      copyBlob_result result = new copyBlob_result();
      receiveBase(result, "copyBlob");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public String createBucket(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_createBucket(bucketName, visibility, security);
      return recv_createBucket();
    }

    public void send_createBucket(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      createBucket_args args = new createBucket_args();
      args.setBucketName(bucketName);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("createBucket", args);
    }

    public String recv_createBucket() throws BlobException, org.apache.thrift.TException
    {
      createBucket_result result = new createBucket_result();
      receiveBase(result, "createBucket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBucket failed: unknown result");
    }

    public void deleteBucket(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_deleteBucket(bucketName, security);
      recv_deleteBucket();
    }

    public void send_deleteBucket(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      deleteBucket_args args = new deleteBucket_args();
      args.setBucketName(bucketName);
      args.setSecurity(security);
      sendBase("deleteBucket", args);
    }

    public void recv_deleteBucket() throws BlobException, org.apache.thrift.TException
    {
      deleteBucket_result result = new deleteBucket_result();
      receiveBase(result, "deleteBucket");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public boolean doesBucketExist(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_doesBucketExist(bucketName, security);
      return recv_doesBucketExist();
    }

    public void send_doesBucketExist(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      doesBucketExist_args args = new doesBucketExist_args();
      args.setBucketName(bucketName);
      args.setSecurity(security);
      sendBase("doesBucketExist", args);
    }

    public boolean recv_doesBucketExist() throws BlobException, org.apache.thrift.TException
    {
      doesBucketExist_result result = new doesBucketExist_result();
      receiveBase(result, "doesBucketExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doesBucketExist failed: unknown result");
    }

    public boolean doesBlobExist(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_doesBlobExist(bucketName, key, security);
      return recv_doesBlobExist();
    }

    public void send_doesBlobExist(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      doesBlobExist_args args = new doesBlobExist_args();
      args.setBucketName(bucketName);
      args.setKey(key);
      args.setSecurity(security);
      sendBase("doesBlobExist", args);
    }

    public boolean recv_doesBlobExist() throws BlobException, org.apache.thrift.TException
    {
      doesBlobExist_result result = new doesBlobExist_result();
      receiveBase(result, "doesBlobExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doesBlobExist failed: unknown result");
    }

    public List<ezbake.base.thrift.Visibility> getBlobVisibility(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_getBlobVisibility(bucketName, key, security);
      return recv_getBlobVisibility();
    }

    public void send_getBlobVisibility(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getBlobVisibility_args args = new getBlobVisibility_args();
      args.setBucketName(bucketName);
      args.setKey(key);
      args.setSecurity(security);
      sendBase("getBlobVisibility", args);
    }

    public List<ezbake.base.thrift.Visibility> recv_getBlobVisibility() throws BlobException, org.apache.thrift.TException
    {
      getBlobVisibility_result result = new getBlobVisibility_result();
      receiveBase(result, "getBlobVisibility");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBlobVisibility failed: unknown result");
    }

    public ezbake.base.thrift.Visibility getBucketVisibility(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_getBucketVisibility(bucketName, security);
      return recv_getBucketVisibility();
    }

    public void send_getBucketVisibility(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getBucketVisibility_args args = new getBucketVisibility_args();
      args.setBucketName(bucketName);
      args.setSecurity(security);
      sendBase("getBucketVisibility", args);
    }

    public ezbake.base.thrift.Visibility recv_getBucketVisibility() throws BlobException, org.apache.thrift.TException
    {
      getBucketVisibility_result result = new getBucketVisibility_result();
      receiveBase(result, "getBucketVisibility");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBucketVisibility failed: unknown result");
    }

    public Set<String> listBuckets(ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_listBuckets(security);
      return recv_listBuckets();
    }

    public void send_listBuckets(ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      listBuckets_args args = new listBuckets_args();
      args.setSecurity(security);
      sendBase("listBuckets", args);
    }

    public Set<String> recv_listBuckets() throws BlobException, org.apache.thrift.TException
    {
      listBuckets_result result = new listBuckets_result();
      receiveBase(result, "listBuckets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBuckets failed: unknown result");
    }

    public List<Blob> listBlobs(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_listBlobs(bucketName, security);
      return recv_listBlobs();
    }

    public void send_listBlobs(String bucketName, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      listBlobs_args args = new listBlobs_args();
      args.setBucketName(bucketName);
      args.setSecurity(security);
      sendBase("listBlobs", args);
    }

    public List<Blob> recv_listBlobs() throws BlobException, org.apache.thrift.TException
    {
      listBlobs_result result = new listBlobs_result();
      receiveBase(result, "listBlobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBlobs failed: unknown result");
    }

    public void setBucketVisibility(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_setBucketVisibility(bucketName, visibility, security);
      recv_setBucketVisibility();
    }

    public void send_setBucketVisibility(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      setBucketVisibility_args args = new setBucketVisibility_args();
      args.setBucketName(bucketName);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("setBucketVisibility", args);
    }

    public void recv_setBucketVisibility() throws BlobException, org.apache.thrift.TException
    {
      setBucketVisibility_result result = new setBucketVisibility_result();
      receiveBase(result, "setBucketVisibility");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void setBlobVisibility(String bucketName, String key, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws BlobException, org.apache.thrift.TException
    {
      send_setBlobVisibility(bucketName, key, visibility, security);
      recv_setBlobVisibility();
    }

    public void send_setBlobVisibility(String bucketName, String key, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      setBlobVisibility_args args = new setBlobVisibility_args();
      args.setBucketName(bucketName);
      args.setKey(key);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("setBlobVisibility", args);
    }

    public void recv_setBlobVisibility() throws BlobException, org.apache.thrift.TException
    {
      setBlobVisibility_result result = new setBlobVisibility_result();
      receiveBase(result, "setBlobVisibility");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

  }
  public static class AsyncClient extends ezbake.data.base.thrift.BaseDataService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void putBlob(Blob entry, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putBlob_call method_call = new putBlob_call(entry, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putBlob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Blob entry;
      private ezbake.base.thrift.EzSecurityToken security;
      public putBlob_call(Blob entry, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entry = entry;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putBlob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putBlob_args args = new putBlob_args();
        args.setEntry(entry);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_putBlob();
      }
    }

    public void getBlobs(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBlobs_call method_call = new getBlobs_call(bucketName, key, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBlobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private String key;
      private ezbake.base.thrift.EzSecurityToken security;
      public getBlobs_call(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.key = key;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBlobs_args args = new getBlobs_args();
        args.setBucketName(bucketName);
        args.setKey(key);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<ByteBuffer> getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlobs();
      }
    }

    public void removeBlob(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeBlob_call method_call = new removeBlob_call(bucketName, key, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeBlob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private String key;
      private ezbake.base.thrift.EzSecurityToken security;
      public removeBlob_call(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.key = key;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeBlob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeBlob_args args = new removeBlob_args();
        args.setBucketName(bucketName);
        args.setKey(key);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeBlob();
      }
    }

    public void copyBlob(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      copyBlob_call method_call = new copyBlob_call(sourceBucketName, sourceKey, destinationBucketName, destinationKey, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class copyBlob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sourceBucketName;
      private String sourceKey;
      private String destinationBucketName;
      private String destinationKey;
      private ezbake.base.thrift.EzSecurityToken security;
      public copyBlob_call(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceBucketName = sourceBucketName;
        this.sourceKey = sourceKey;
        this.destinationBucketName = destinationBucketName;
        this.destinationKey = destinationKey;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("copyBlob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        copyBlob_args args = new copyBlob_args();
        args.setSourceBucketName(sourceBucketName);
        args.setSourceKey(sourceKey);
        args.setDestinationBucketName(destinationBucketName);
        args.setDestinationKey(destinationKey);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_copyBlob();
      }
    }

    public void createBucket(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBucket_call method_call = new createBucket_call(bucketName, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBucket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public createBucket_call(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBucket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBucket_args args = new createBucket_args();
        args.setBucketName(bucketName);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBucket();
      }
    }

    public void deleteBucket(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBucket_call method_call = new deleteBucket_call(bucketName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBucket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private ezbake.base.thrift.EzSecurityToken security;
      public deleteBucket_call(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBucket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBucket_args args = new deleteBucket_args();
        args.setBucketName(bucketName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteBucket();
      }
    }

    public void doesBucketExist(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doesBucketExist_call method_call = new doesBucketExist_call(bucketName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doesBucketExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private ezbake.base.thrift.EzSecurityToken security;
      public doesBucketExist_call(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doesBucketExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doesBucketExist_args args = new doesBucketExist_args();
        args.setBucketName(bucketName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doesBucketExist();
      }
    }

    public void doesBlobExist(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doesBlobExist_call method_call = new doesBlobExist_call(bucketName, key, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doesBlobExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private String key;
      private ezbake.base.thrift.EzSecurityToken security;
      public doesBlobExist_call(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.key = key;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doesBlobExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doesBlobExist_args args = new doesBlobExist_args();
        args.setBucketName(bucketName);
        args.setKey(key);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doesBlobExist();
      }
    }

    public void getBlobVisibility(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBlobVisibility_call method_call = new getBlobVisibility_call(bucketName, key, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBlobVisibility_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private String key;
      private ezbake.base.thrift.EzSecurityToken security;
      public getBlobVisibility_call(String bucketName, String key, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.key = key;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlobVisibility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBlobVisibility_args args = new getBlobVisibility_args();
        args.setBucketName(bucketName);
        args.setKey(key);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ezbake.base.thrift.Visibility> getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlobVisibility();
      }
    }

    public void getBucketVisibility(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBucketVisibility_call method_call = new getBucketVisibility_call(bucketName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBucketVisibility_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private ezbake.base.thrift.EzSecurityToken security;
      public getBucketVisibility_call(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBucketVisibility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBucketVisibility_args args = new getBucketVisibility_args();
        args.setBucketName(bucketName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.base.thrift.Visibility getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBucketVisibility();
      }
    }

    public void listBuckets(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBuckets_call method_call = new listBuckets_call(security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listBuckets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken security;
      public listBuckets_call(ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBuckets_args args = new listBuckets_args();
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBuckets();
      }
    }

    public void listBlobs(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBlobs_call method_call = new listBlobs_call(bucketName, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listBlobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private ezbake.base.thrift.EzSecurityToken security;
      public listBlobs_call(String bucketName, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBlobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBlobs_args args = new listBlobs_args();
        args.setBucketName(bucketName);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Blob> getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBlobs();
      }
    }

    public void setBucketVisibility(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setBucketVisibility_call method_call = new setBucketVisibility_call(bucketName, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setBucketVisibility_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public setBucketVisibility_call(String bucketName, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBucketVisibility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setBucketVisibility_args args = new setBucketVisibility_args();
        args.setBucketName(bucketName);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setBucketVisibility();
      }
    }

    public void setBlobVisibility(String bucketName, String key, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setBlobVisibility_call method_call = new setBlobVisibility_call(bucketName, key, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setBlobVisibility_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bucketName;
      private String key;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public setBlobVisibility_call(String bucketName, String key, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketName = bucketName;
        this.key = key;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBlobVisibility", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setBlobVisibility_args args = new setBlobVisibility_args();
        args.setBucketName(bucketName);
        args.setKey(key);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlobException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setBlobVisibility();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.data.base.thrift.BaseDataService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("putBlob", new putBlob());
      processMap.put("getBlobs", new getBlobs());
      processMap.put("removeBlob", new removeBlob());
      processMap.put("copyBlob", new copyBlob());
      processMap.put("createBucket", new createBucket());
      processMap.put("deleteBucket", new deleteBucket());
      processMap.put("doesBucketExist", new doesBucketExist());
      processMap.put("doesBlobExist", new doesBlobExist());
      processMap.put("getBlobVisibility", new getBlobVisibility());
      processMap.put("getBucketVisibility", new getBucketVisibility());
      processMap.put("listBuckets", new listBuckets());
      processMap.put("listBlobs", new listBlobs());
      processMap.put("setBucketVisibility", new setBucketVisibility());
      processMap.put("setBlobVisibility", new setBlobVisibility());
      return processMap;
    }

    public static class putBlob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putBlob_args> {
      public putBlob() {
        super("putBlob");
      }

      public putBlob_args getEmptyArgsInstance() {
        return new putBlob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putBlob_result getResult(I iface, putBlob_args args) throws org.apache.thrift.TException {
        putBlob_result result = new putBlob_result();
        try {
          iface.putBlob(args.entry, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getBlobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBlobs_args> {
      public getBlobs() {
        super("getBlobs");
      }

      public getBlobs_args getEmptyArgsInstance() {
        return new getBlobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBlobs_result getResult(I iface, getBlobs_args args) throws org.apache.thrift.TException {
        getBlobs_result result = new getBlobs_result();
        try {
          result.success = iface.getBlobs(args.bucketName, args.key, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class removeBlob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeBlob_args> {
      public removeBlob() {
        super("removeBlob");
      }

      public removeBlob_args getEmptyArgsInstance() {
        return new removeBlob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeBlob_result getResult(I iface, removeBlob_args args) throws org.apache.thrift.TException {
        removeBlob_result result = new removeBlob_result();
        try {
          result.success = iface.removeBlob(args.bucketName, args.key, args.security);
          result.setSuccessIsSet(true);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class copyBlob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, copyBlob_args> {
      public copyBlob() {
        super("copyBlob");
      }

      public copyBlob_args getEmptyArgsInstance() {
        return new copyBlob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public copyBlob_result getResult(I iface, copyBlob_args args) throws org.apache.thrift.TException {
        copyBlob_result result = new copyBlob_result();
        try {
          iface.copyBlob(args.sourceBucketName, args.sourceKey, args.destinationBucketName, args.destinationKey, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class createBucket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBucket_args> {
      public createBucket() {
        super("createBucket");
      }

      public createBucket_args getEmptyArgsInstance() {
        return new createBucket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createBucket_result getResult(I iface, createBucket_args args) throws org.apache.thrift.TException {
        createBucket_result result = new createBucket_result();
        try {
          result.success = iface.createBucket(args.bucketName, args.visibility, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class deleteBucket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBucket_args> {
      public deleteBucket() {
        super("deleteBucket");
      }

      public deleteBucket_args getEmptyArgsInstance() {
        return new deleteBucket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBucket_result getResult(I iface, deleteBucket_args args) throws org.apache.thrift.TException {
        deleteBucket_result result = new deleteBucket_result();
        try {
          iface.deleteBucket(args.bucketName, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class doesBucketExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doesBucketExist_args> {
      public doesBucketExist() {
        super("doesBucketExist");
      }

      public doesBucketExist_args getEmptyArgsInstance() {
        return new doesBucketExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doesBucketExist_result getResult(I iface, doesBucketExist_args args) throws org.apache.thrift.TException {
        doesBucketExist_result result = new doesBucketExist_result();
        try {
          result.success = iface.doesBucketExist(args.bucketName, args.security);
          result.setSuccessIsSet(true);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class doesBlobExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doesBlobExist_args> {
      public doesBlobExist() {
        super("doesBlobExist");
      }

      public doesBlobExist_args getEmptyArgsInstance() {
        return new doesBlobExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doesBlobExist_result getResult(I iface, doesBlobExist_args args) throws org.apache.thrift.TException {
        doesBlobExist_result result = new doesBlobExist_result();
        try {
          result.success = iface.doesBlobExist(args.bucketName, args.key, args.security);
          result.setSuccessIsSet(true);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getBlobVisibility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBlobVisibility_args> {
      public getBlobVisibility() {
        super("getBlobVisibility");
      }

      public getBlobVisibility_args getEmptyArgsInstance() {
        return new getBlobVisibility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBlobVisibility_result getResult(I iface, getBlobVisibility_args args) throws org.apache.thrift.TException {
        getBlobVisibility_result result = new getBlobVisibility_result();
        try {
          result.success = iface.getBlobVisibility(args.bucketName, args.key, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getBucketVisibility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBucketVisibility_args> {
      public getBucketVisibility() {
        super("getBucketVisibility");
      }

      public getBucketVisibility_args getEmptyArgsInstance() {
        return new getBucketVisibility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBucketVisibility_result getResult(I iface, getBucketVisibility_args args) throws org.apache.thrift.TException {
        getBucketVisibility_result result = new getBucketVisibility_result();
        try {
          result.success = iface.getBucketVisibility(args.bucketName, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class listBuckets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBuckets_args> {
      public listBuckets() {
        super("listBuckets");
      }

      public listBuckets_args getEmptyArgsInstance() {
        return new listBuckets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listBuckets_result getResult(I iface, listBuckets_args args) throws org.apache.thrift.TException {
        listBuckets_result result = new listBuckets_result();
        try {
          result.success = iface.listBuckets(args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class listBlobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBlobs_args> {
      public listBlobs() {
        super("listBlobs");
      }

      public listBlobs_args getEmptyArgsInstance() {
        return new listBlobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listBlobs_result getResult(I iface, listBlobs_args args) throws org.apache.thrift.TException {
        listBlobs_result result = new listBlobs_result();
        try {
          result.success = iface.listBlobs(args.bucketName, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class setBucketVisibility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBucketVisibility_args> {
      public setBucketVisibility() {
        super("setBucketVisibility");
      }

      public setBucketVisibility_args getEmptyArgsInstance() {
        return new setBucketVisibility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setBucketVisibility_result getResult(I iface, setBucketVisibility_args args) throws org.apache.thrift.TException {
        setBucketVisibility_result result = new setBucketVisibility_result();
        try {
          iface.setBucketVisibility(args.bucketName, args.visibility, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class setBlobVisibility<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBlobVisibility_args> {
      public setBlobVisibility() {
        super("setBlobVisibility");
      }

      public setBlobVisibility_args getEmptyArgsInstance() {
        return new setBlobVisibility_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setBlobVisibility_result getResult(I iface, setBlobVisibility_args args) throws org.apache.thrift.TException {
        setBlobVisibility_result result = new setBlobVisibility_result();
        try {
          iface.setBlobVisibility(args.bucketName, args.key, args.visibility, args.security);
        } catch (BlobException error) {
          result.error = error;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.data.base.thrift.BaseDataService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("putBlob", new putBlob());
      processMap.put("getBlobs", new getBlobs());
      processMap.put("removeBlob", new removeBlob());
      processMap.put("copyBlob", new copyBlob());
      processMap.put("createBucket", new createBucket());
      processMap.put("deleteBucket", new deleteBucket());
      processMap.put("doesBucketExist", new doesBucketExist());
      processMap.put("doesBlobExist", new doesBlobExist());
      processMap.put("getBlobVisibility", new getBlobVisibility());
      processMap.put("getBucketVisibility", new getBucketVisibility());
      processMap.put("listBuckets", new listBuckets());
      processMap.put("listBlobs", new listBlobs());
      processMap.put("setBucketVisibility", new setBucketVisibility());
      processMap.put("setBlobVisibility", new setBlobVisibility());
      return processMap;
    }

    public static class putBlob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putBlob_args, Void> {
      public putBlob() {
        super("putBlob");
      }

      public putBlob_args getEmptyArgsInstance() {
        return new putBlob_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            putBlob_result result = new putBlob_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putBlob_result result = new putBlob_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putBlob_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.putBlob(args.entry, args.security,resultHandler);
      }
    }

    public static class getBlobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBlobs_args, Set<ByteBuffer>> {
      public getBlobs() {
        super("getBlobs");
      }

      public getBlobs_args getEmptyArgsInstance() {
        return new getBlobs_args();
      }

      public AsyncMethodCallback<Set<ByteBuffer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<ByteBuffer>>() { 
          public void onComplete(Set<ByteBuffer> o) {
            getBlobs_result result = new getBlobs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBlobs_result result = new getBlobs_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBlobs_args args, org.apache.thrift.async.AsyncMethodCallback<Set<ByteBuffer>> resultHandler) throws TException {
        iface.getBlobs(args.bucketName, args.key, args.security,resultHandler);
      }
    }

    public static class removeBlob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeBlob_args, Integer> {
      public removeBlob() {
        super("removeBlob");
      }

      public removeBlob_args getEmptyArgsInstance() {
        return new removeBlob_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            removeBlob_result result = new removeBlob_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeBlob_result result = new removeBlob_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeBlob_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.removeBlob(args.bucketName, args.key, args.security,resultHandler);
      }
    }

    public static class copyBlob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, copyBlob_args, Void> {
      public copyBlob() {
        super("copyBlob");
      }

      public copyBlob_args getEmptyArgsInstance() {
        return new copyBlob_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            copyBlob_result result = new copyBlob_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            copyBlob_result result = new copyBlob_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, copyBlob_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.copyBlob(args.sourceBucketName, args.sourceKey, args.destinationBucketName, args.destinationKey, args.security,resultHandler);
      }
    }

    public static class createBucket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createBucket_args, String> {
      public createBucket() {
        super("createBucket");
      }

      public createBucket_args getEmptyArgsInstance() {
        return new createBucket_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createBucket_result result = new createBucket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createBucket_result result = new createBucket_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createBucket_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createBucket(args.bucketName, args.visibility, args.security,resultHandler);
      }
    }

    public static class deleteBucket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBucket_args, Void> {
      public deleteBucket() {
        super("deleteBucket");
      }

      public deleteBucket_args getEmptyArgsInstance() {
        return new deleteBucket_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteBucket_result result = new deleteBucket_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBucket_result result = new deleteBucket_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBucket_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteBucket(args.bucketName, args.security,resultHandler);
      }
    }

    public static class doesBucketExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doesBucketExist_args, Boolean> {
      public doesBucketExist() {
        super("doesBucketExist");
      }

      public doesBucketExist_args getEmptyArgsInstance() {
        return new doesBucketExist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            doesBucketExist_result result = new doesBucketExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doesBucketExist_result result = new doesBucketExist_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doesBucketExist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.doesBucketExist(args.bucketName, args.security,resultHandler);
      }
    }

    public static class doesBlobExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doesBlobExist_args, Boolean> {
      public doesBlobExist() {
        super("doesBlobExist");
      }

      public doesBlobExist_args getEmptyArgsInstance() {
        return new doesBlobExist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            doesBlobExist_result result = new doesBlobExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doesBlobExist_result result = new doesBlobExist_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doesBlobExist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.doesBlobExist(args.bucketName, args.key, args.security,resultHandler);
      }
    }

    public static class getBlobVisibility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBlobVisibility_args, List<ezbake.base.thrift.Visibility>> {
      public getBlobVisibility() {
        super("getBlobVisibility");
      }

      public getBlobVisibility_args getEmptyArgsInstance() {
        return new getBlobVisibility_args();
      }

      public AsyncMethodCallback<List<ezbake.base.thrift.Visibility>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ezbake.base.thrift.Visibility>>() { 
          public void onComplete(List<ezbake.base.thrift.Visibility> o) {
            getBlobVisibility_result result = new getBlobVisibility_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBlobVisibility_result result = new getBlobVisibility_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBlobVisibility_args args, org.apache.thrift.async.AsyncMethodCallback<List<ezbake.base.thrift.Visibility>> resultHandler) throws TException {
        iface.getBlobVisibility(args.bucketName, args.key, args.security,resultHandler);
      }
    }

    public static class getBucketVisibility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBucketVisibility_args, ezbake.base.thrift.Visibility> {
      public getBucketVisibility() {
        super("getBucketVisibility");
      }

      public getBucketVisibility_args getEmptyArgsInstance() {
        return new getBucketVisibility_args();
      }

      public AsyncMethodCallback<ezbake.base.thrift.Visibility> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.base.thrift.Visibility>() { 
          public void onComplete(ezbake.base.thrift.Visibility o) {
            getBucketVisibility_result result = new getBucketVisibility_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBucketVisibility_result result = new getBucketVisibility_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBucketVisibility_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.base.thrift.Visibility> resultHandler) throws TException {
        iface.getBucketVisibility(args.bucketName, args.security,resultHandler);
      }
    }

    public static class listBuckets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listBuckets_args, Set<String>> {
      public listBuckets() {
        super("listBuckets");
      }

      public listBuckets_args getEmptyArgsInstance() {
        return new listBuckets_args();
      }

      public AsyncMethodCallback<Set<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<String>>() { 
          public void onComplete(Set<String> o) {
            listBuckets_result result = new listBuckets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listBuckets_result result = new listBuckets_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listBuckets_args args, org.apache.thrift.async.AsyncMethodCallback<Set<String>> resultHandler) throws TException {
        iface.listBuckets(args.security,resultHandler);
      }
    }

    public static class listBlobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listBlobs_args, List<Blob>> {
      public listBlobs() {
        super("listBlobs");
      }

      public listBlobs_args getEmptyArgsInstance() {
        return new listBlobs_args();
      }

      public AsyncMethodCallback<List<Blob>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Blob>>() { 
          public void onComplete(List<Blob> o) {
            listBlobs_result result = new listBlobs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listBlobs_result result = new listBlobs_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listBlobs_args args, org.apache.thrift.async.AsyncMethodCallback<List<Blob>> resultHandler) throws TException {
        iface.listBlobs(args.bucketName, args.security,resultHandler);
      }
    }

    public static class setBucketVisibility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setBucketVisibility_args, Void> {
      public setBucketVisibility() {
        super("setBucketVisibility");
      }

      public setBucketVisibility_args getEmptyArgsInstance() {
        return new setBucketVisibility_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setBucketVisibility_result result = new setBucketVisibility_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setBucketVisibility_result result = new setBucketVisibility_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setBucketVisibility_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setBucketVisibility(args.bucketName, args.visibility, args.security,resultHandler);
      }
    }

    public static class setBlobVisibility<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setBlobVisibility_args, Void> {
      public setBlobVisibility() {
        super("setBlobVisibility");
      }

      public setBlobVisibility_args getEmptyArgsInstance() {
        return new setBlobVisibility_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setBlobVisibility_result result = new setBlobVisibility_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setBlobVisibility_result result = new setBlobVisibility_result();
            if (e instanceof BlobException) {
                        result.error = (BlobException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setBlobVisibility_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setBlobVisibility(args.bucketName, args.key, args.visibility, args.security,resultHandler);
      }
    }

  }

  public static class putBlob_args implements org.apache.thrift.TBase<putBlob_args, putBlob_args._Fields>, java.io.Serializable, Cloneable, Comparable<putBlob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putBlob_args");

    private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putBlob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putBlob_argsTupleSchemeFactory());
    }

    public Blob entry; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTRY((short)1, "entry"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTRY
            return ENTRY;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Blob.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putBlob_args.class, metaDataMap);
    }

    public putBlob_args() {
    }

    public putBlob_args(
      Blob entry,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.entry = entry;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putBlob_args(putBlob_args other) {
      if (other.isSetEntry()) {
        this.entry = new Blob(other.entry);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public putBlob_args deepCopy() {
      return new putBlob_args(this);
    }

    @Override
    public void clear() {
      this.entry = null;
      this.security = null;
    }

    public Blob getEntry() {
      return this.entry;
    }

    public putBlob_args setEntry(Blob entry) {
      this.entry = entry;
      return this;
    }

    public void unsetEntry() {
      this.entry = null;
    }

    /** Returns true if field entry is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry() {
      return this.entry != null;
    }

    public void setEntryIsSet(boolean value) {
      if (!value) {
        this.entry = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public putBlob_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTRY:
        if (value == null) {
          unsetEntry();
        } else {
          setEntry((Blob)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTRY:
        return getEntry();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTRY:
        return isSetEntry();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putBlob_args)
        return this.equals((putBlob_args)that);
      return false;
    }

    public boolean equals(putBlob_args that) {
      if (that == null)
        return false;

      boolean this_present_entry = true && this.isSetEntry();
      boolean that_present_entry = true && that.isSetEntry();
      if (this_present_entry || that_present_entry) {
        if (!(this_present_entry && that_present_entry))
          return false;
        if (!this.entry.equals(that.entry))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_entry = true && (isSetEntry());
      builder.append(present_entry);
      if (present_entry)
        builder.append(entry);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(putBlob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntry()).compareTo(other.isSetEntry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, other.entry);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putBlob_args(");
      boolean first = true;

      sb.append("entry:");
      if (this.entry == null) {
        sb.append("null");
      } else {
        sb.append(this.entry);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entry != null) {
        entry.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putBlob_argsStandardSchemeFactory implements SchemeFactory {
      public putBlob_argsStandardScheme getScheme() {
        return new putBlob_argsStandardScheme();
      }
    }

    private static class putBlob_argsStandardScheme extends StandardScheme<putBlob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putBlob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTRY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entry = new Blob();
                struct.entry.read(iprot);
                struct.setEntryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putBlob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entry != null) {
          oprot.writeFieldBegin(ENTRY_FIELD_DESC);
          struct.entry.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putBlob_argsTupleSchemeFactory implements SchemeFactory {
      public putBlob_argsTupleScheme getScheme() {
        return new putBlob_argsTupleScheme();
      }
    }

    private static class putBlob_argsTupleScheme extends TupleScheme<putBlob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntry()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntry()) {
          struct.entry.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.entry = new Blob();
          struct.entry.read(iprot);
          struct.setEntryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class putBlob_result implements org.apache.thrift.TBase<putBlob_result, putBlob_result._Fields>, java.io.Serializable, Cloneable, Comparable<putBlob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putBlob_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putBlob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putBlob_resultTupleSchemeFactory());
    }

    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putBlob_result.class, metaDataMap);
    }

    public putBlob_result() {
    }

    public putBlob_result(
      BlobException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putBlob_result(putBlob_result other) {
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public putBlob_result deepCopy() {
      return new putBlob_result(this);
    }

    @Override
    public void clear() {
      this.error = null;
    }

    public BlobException getError() {
      return this.error;
    }

    public putBlob_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putBlob_result)
        return this.equals((putBlob_result)that);
      return false;
    }

    public boolean equals(putBlob_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(putBlob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putBlob_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putBlob_resultStandardSchemeFactory implements SchemeFactory {
      public putBlob_resultStandardScheme getScheme() {
        return new putBlob_resultStandardScheme();
      }
    }

    private static class putBlob_resultStandardScheme extends StandardScheme<putBlob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putBlob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putBlob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putBlob_resultTupleSchemeFactory implements SchemeFactory {
      public putBlob_resultTupleScheme getScheme() {
        return new putBlob_resultTupleScheme();
      }
    }

    private static class putBlob_resultTupleScheme extends TupleScheme<putBlob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getBlobs_args implements org.apache.thrift.TBase<getBlobs_args, getBlobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBlobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlobs_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlobs_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public String key; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      KEY((short)2, "key"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // KEY
            return KEY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlobs_args.class, metaDataMap);
    }

    public getBlobs_args() {
    }

    public getBlobs_args(
      String bucketName,
      String key,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.key = key;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlobs_args(getBlobs_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getBlobs_args deepCopy() {
      return new getBlobs_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.key = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public getBlobs_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public getBlobs_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getBlobs_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case KEY:
        return getKey();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case KEY:
        return isSetKey();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlobs_args)
        return this.equals((getBlobs_args)that);
      return false;
    }

    public boolean equals(getBlobs_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getBlobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlobs_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlobs_argsStandardSchemeFactory implements SchemeFactory {
      public getBlobs_argsStandardScheme getScheme() {
        return new getBlobs_argsStandardScheme();
      }
    }

    private static class getBlobs_argsStandardScheme extends StandardScheme<getBlobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlobs_argsTupleSchemeFactory implements SchemeFactory {
      public getBlobs_argsTupleScheme getScheme() {
        return new getBlobs_argsTupleScheme();
      }
    }

    private static class getBlobs_argsTupleScheme extends TupleScheme<getBlobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getBlobs_result implements org.apache.thrift.TBase<getBlobs_result, getBlobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBlobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlobs_resultTupleSchemeFactory());
    }

    public Set<ByteBuffer> success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlobs_result.class, metaDataMap);
    }

    public getBlobs_result() {
    }

    public getBlobs_result(
      Set<ByteBuffer> success,
      BlobException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlobs_result(getBlobs_result other) {
      if (other.isSetSuccess()) {
        Set<ByteBuffer> __this__success = new HashSet<ByteBuffer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public getBlobs_result deepCopy() {
      return new getBlobs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ByteBuffer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ByteBuffer elem) {
      if (this.success == null) {
        this.success = new HashSet<ByteBuffer>();
      }
      this.success.add(elem);
    }

    public Set<ByteBuffer> getSuccess() {
      return this.success;
    }

    public getBlobs_result setSuccess(Set<ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlobException getError() {
      return this.error;
    }

    public getBlobs_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<ByteBuffer>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlobs_result)
        return this.equals((getBlobs_result)that);
      return false;
    }

    public boolean equals(getBlobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getBlobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlobs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlobs_resultStandardSchemeFactory implements SchemeFactory {
      public getBlobs_resultStandardScheme getScheme() {
        return new getBlobs_resultStandardScheme();
      }
    }

    private static class getBlobs_resultStandardScheme extends StandardScheme<getBlobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.success = new HashSet<ByteBuffer>(2*_set0.size);
                  for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                  {
                    ByteBuffer _elem2;
                    _elem2 = iprot.readBinary();
                    struct.success.add(_elem2);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (ByteBuffer _iter3 : struct.success)
            {
              oprot.writeBinary(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlobs_resultTupleSchemeFactory implements SchemeFactory {
      public getBlobs_resultTupleScheme getScheme() {
        return new getBlobs_resultTupleScheme();
      }
    }

    private static class getBlobs_resultTupleScheme extends TupleScheme<getBlobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ByteBuffer _iter4 : struct.success)
            {
              oprot.writeBinary(_iter4);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<ByteBuffer>(2*_set5.size);
            for (int _i6 = 0; _i6 < _set5.size; ++_i6)
            {
              ByteBuffer _elem7;
              _elem7 = iprot.readBinary();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class removeBlob_args implements org.apache.thrift.TBase<removeBlob_args, removeBlob_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeBlob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeBlob_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeBlob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeBlob_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public String key; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      KEY((short)2, "key"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // KEY
            return KEY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeBlob_args.class, metaDataMap);
    }

    public removeBlob_args() {
    }

    public removeBlob_args(
      String bucketName,
      String key,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.key = key;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBlob_args(removeBlob_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public removeBlob_args deepCopy() {
      return new removeBlob_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.key = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public removeBlob_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public removeBlob_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public removeBlob_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case KEY:
        return getKey();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case KEY:
        return isSetKey();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBlob_args)
        return this.equals((removeBlob_args)that);
      return false;
    }

    public boolean equals(removeBlob_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeBlob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeBlob_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeBlob_argsStandardSchemeFactory implements SchemeFactory {
      public removeBlob_argsStandardScheme getScheme() {
        return new removeBlob_argsStandardScheme();
      }
    }

    private static class removeBlob_argsStandardScheme extends StandardScheme<removeBlob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeBlob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeBlob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeBlob_argsTupleSchemeFactory implements SchemeFactory {
      public removeBlob_argsTupleScheme getScheme() {
        return new removeBlob_argsTupleScheme();
      }
    }

    private static class removeBlob_argsTupleScheme extends TupleScheme<removeBlob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class removeBlob_result implements org.apache.thrift.TBase<removeBlob_result, removeBlob_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeBlob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeBlob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeBlob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeBlob_resultTupleSchemeFactory());
    }

    public int success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeBlob_result.class, metaDataMap);
    }

    public removeBlob_result() {
    }

    public removeBlob_result(
      int success,
      BlobException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBlob_result(removeBlob_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public removeBlob_result deepCopy() {
      return new removeBlob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.error = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public removeBlob_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlobException getError() {
      return this.error;
    }

    public removeBlob_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBlob_result)
        return this.equals((removeBlob_result)that);
      return false;
    }

    public boolean equals(removeBlob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeBlob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeBlob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeBlob_resultStandardSchemeFactory implements SchemeFactory {
      public removeBlob_resultStandardScheme getScheme() {
        return new removeBlob_resultStandardScheme();
      }
    }

    private static class removeBlob_resultStandardScheme extends StandardScheme<removeBlob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeBlob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeBlob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeBlob_resultTupleSchemeFactory implements SchemeFactory {
      public removeBlob_resultTupleScheme getScheme() {
        return new removeBlob_resultTupleScheme();
      }
    }

    private static class removeBlob_resultTupleScheme extends TupleScheme<removeBlob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class copyBlob_args implements org.apache.thrift.TBase<copyBlob_args, copyBlob_args._Fields>, java.io.Serializable, Cloneable, Comparable<copyBlob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyBlob_args");

    private static final org.apache.thrift.protocol.TField SOURCE_BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceBucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DESTINATION_BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationBucketName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DESTINATION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationKey", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyBlob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyBlob_argsTupleSchemeFactory());
    }

    public String sourceBucketName; // required
    public String sourceKey; // required
    public String destinationBucketName; // required
    public String destinationKey; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_BUCKET_NAME((short)1, "sourceBucketName"),
      SOURCE_KEY((short)2, "sourceKey"),
      DESTINATION_BUCKET_NAME((short)3, "destinationBucketName"),
      DESTINATION_KEY((short)4, "destinationKey"),
      SECURITY((short)5, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_BUCKET_NAME
            return SOURCE_BUCKET_NAME;
          case 2: // SOURCE_KEY
            return SOURCE_KEY;
          case 3: // DESTINATION_BUCKET_NAME
            return DESTINATION_BUCKET_NAME;
          case 4: // DESTINATION_KEY
            return DESTINATION_KEY;
          case 5: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceBucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_KEY, new org.apache.thrift.meta_data.FieldMetaData("sourceKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESTINATION_BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("destinationBucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESTINATION_KEY, new org.apache.thrift.meta_data.FieldMetaData("destinationKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyBlob_args.class, metaDataMap);
    }

    public copyBlob_args() {
    }

    public copyBlob_args(
      String sourceBucketName,
      String sourceKey,
      String destinationBucketName,
      String destinationKey,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.sourceBucketName = sourceBucketName;
      this.sourceKey = sourceKey;
      this.destinationBucketName = destinationBucketName;
      this.destinationKey = destinationKey;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyBlob_args(copyBlob_args other) {
      if (other.isSetSourceBucketName()) {
        this.sourceBucketName = other.sourceBucketName;
      }
      if (other.isSetSourceKey()) {
        this.sourceKey = other.sourceKey;
      }
      if (other.isSetDestinationBucketName()) {
        this.destinationBucketName = other.destinationBucketName;
      }
      if (other.isSetDestinationKey()) {
        this.destinationKey = other.destinationKey;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public copyBlob_args deepCopy() {
      return new copyBlob_args(this);
    }

    @Override
    public void clear() {
      this.sourceBucketName = null;
      this.sourceKey = null;
      this.destinationBucketName = null;
      this.destinationKey = null;
      this.security = null;
    }

    public String getSourceBucketName() {
      return this.sourceBucketName;
    }

    public copyBlob_args setSourceBucketName(String sourceBucketName) {
      this.sourceBucketName = sourceBucketName;
      return this;
    }

    public void unsetSourceBucketName() {
      this.sourceBucketName = null;
    }

    /** Returns true if field sourceBucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceBucketName() {
      return this.sourceBucketName != null;
    }

    public void setSourceBucketNameIsSet(boolean value) {
      if (!value) {
        this.sourceBucketName = null;
      }
    }

    public String getSourceKey() {
      return this.sourceKey;
    }

    public copyBlob_args setSourceKey(String sourceKey) {
      this.sourceKey = sourceKey;
      return this;
    }

    public void unsetSourceKey() {
      this.sourceKey = null;
    }

    /** Returns true if field sourceKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceKey() {
      return this.sourceKey != null;
    }

    public void setSourceKeyIsSet(boolean value) {
      if (!value) {
        this.sourceKey = null;
      }
    }

    public String getDestinationBucketName() {
      return this.destinationBucketName;
    }

    public copyBlob_args setDestinationBucketName(String destinationBucketName) {
      this.destinationBucketName = destinationBucketName;
      return this;
    }

    public void unsetDestinationBucketName() {
      this.destinationBucketName = null;
    }

    /** Returns true if field destinationBucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetDestinationBucketName() {
      return this.destinationBucketName != null;
    }

    public void setDestinationBucketNameIsSet(boolean value) {
      if (!value) {
        this.destinationBucketName = null;
      }
    }

    public String getDestinationKey() {
      return this.destinationKey;
    }

    public copyBlob_args setDestinationKey(String destinationKey) {
      this.destinationKey = destinationKey;
      return this;
    }

    public void unsetDestinationKey() {
      this.destinationKey = null;
    }

    /** Returns true if field destinationKey is set (has been assigned a value) and false otherwise */
    public boolean isSetDestinationKey() {
      return this.destinationKey != null;
    }

    public void setDestinationKeyIsSet(boolean value) {
      if (!value) {
        this.destinationKey = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public copyBlob_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE_BUCKET_NAME:
        if (value == null) {
          unsetSourceBucketName();
        } else {
          setSourceBucketName((String)value);
        }
        break;

      case SOURCE_KEY:
        if (value == null) {
          unsetSourceKey();
        } else {
          setSourceKey((String)value);
        }
        break;

      case DESTINATION_BUCKET_NAME:
        if (value == null) {
          unsetDestinationBucketName();
        } else {
          setDestinationBucketName((String)value);
        }
        break;

      case DESTINATION_KEY:
        if (value == null) {
          unsetDestinationKey();
        } else {
          setDestinationKey((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_BUCKET_NAME:
        return getSourceBucketName();

      case SOURCE_KEY:
        return getSourceKey();

      case DESTINATION_BUCKET_NAME:
        return getDestinationBucketName();

      case DESTINATION_KEY:
        return getDestinationKey();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_BUCKET_NAME:
        return isSetSourceBucketName();
      case SOURCE_KEY:
        return isSetSourceKey();
      case DESTINATION_BUCKET_NAME:
        return isSetDestinationBucketName();
      case DESTINATION_KEY:
        return isSetDestinationKey();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyBlob_args)
        return this.equals((copyBlob_args)that);
      return false;
    }

    public boolean equals(copyBlob_args that) {
      if (that == null)
        return false;

      boolean this_present_sourceBucketName = true && this.isSetSourceBucketName();
      boolean that_present_sourceBucketName = true && that.isSetSourceBucketName();
      if (this_present_sourceBucketName || that_present_sourceBucketName) {
        if (!(this_present_sourceBucketName && that_present_sourceBucketName))
          return false;
        if (!this.sourceBucketName.equals(that.sourceBucketName))
          return false;
      }

      boolean this_present_sourceKey = true && this.isSetSourceKey();
      boolean that_present_sourceKey = true && that.isSetSourceKey();
      if (this_present_sourceKey || that_present_sourceKey) {
        if (!(this_present_sourceKey && that_present_sourceKey))
          return false;
        if (!this.sourceKey.equals(that.sourceKey))
          return false;
      }

      boolean this_present_destinationBucketName = true && this.isSetDestinationBucketName();
      boolean that_present_destinationBucketName = true && that.isSetDestinationBucketName();
      if (this_present_destinationBucketName || that_present_destinationBucketName) {
        if (!(this_present_destinationBucketName && that_present_destinationBucketName))
          return false;
        if (!this.destinationBucketName.equals(that.destinationBucketName))
          return false;
      }

      boolean this_present_destinationKey = true && this.isSetDestinationKey();
      boolean that_present_destinationKey = true && that.isSetDestinationKey();
      if (this_present_destinationKey || that_present_destinationKey) {
        if (!(this_present_destinationKey && that_present_destinationKey))
          return false;
        if (!this.destinationKey.equals(that.destinationKey))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sourceBucketName = true && (isSetSourceBucketName());
      builder.append(present_sourceBucketName);
      if (present_sourceBucketName)
        builder.append(sourceBucketName);

      boolean present_sourceKey = true && (isSetSourceKey());
      builder.append(present_sourceKey);
      if (present_sourceKey)
        builder.append(sourceKey);

      boolean present_destinationBucketName = true && (isSetDestinationBucketName());
      builder.append(present_destinationBucketName);
      if (present_destinationBucketName)
        builder.append(destinationBucketName);

      boolean present_destinationKey = true && (isSetDestinationKey());
      builder.append(present_destinationKey);
      if (present_destinationKey)
        builder.append(destinationKey);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(copyBlob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSourceBucketName()).compareTo(other.isSetSourceBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceBucketName, other.sourceBucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceKey()).compareTo(other.isSetSourceKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceKey, other.sourceKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestinationBucketName()).compareTo(other.isSetDestinationBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestinationBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationBucketName, other.destinationBucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestinationKey()).compareTo(other.isSetDestinationKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestinationKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationKey, other.destinationKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyBlob_args(");
      boolean first = true;

      sb.append("sourceBucketName:");
      if (this.sourceBucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceBucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceKey:");
      if (this.sourceKey == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("destinationBucketName:");
      if (this.destinationBucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationBucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("destinationKey:");
      if (this.destinationKey == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyBlob_argsStandardSchemeFactory implements SchemeFactory {
      public copyBlob_argsStandardScheme getScheme() {
        return new copyBlob_argsStandardScheme();
      }
    }

    private static class copyBlob_argsStandardScheme extends StandardScheme<copyBlob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyBlob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceBucketName = iprot.readString();
                struct.setSourceBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceKey = iprot.readString();
                struct.setSourceKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESTINATION_BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destinationBucketName = iprot.readString();
                struct.setDestinationBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESTINATION_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destinationKey = iprot.readString();
                struct.setDestinationKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyBlob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sourceBucketName != null) {
          oprot.writeFieldBegin(SOURCE_BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.sourceBucketName);
          oprot.writeFieldEnd();
        }
        if (struct.sourceKey != null) {
          oprot.writeFieldBegin(SOURCE_KEY_FIELD_DESC);
          oprot.writeString(struct.sourceKey);
          oprot.writeFieldEnd();
        }
        if (struct.destinationBucketName != null) {
          oprot.writeFieldBegin(DESTINATION_BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.destinationBucketName);
          oprot.writeFieldEnd();
        }
        if (struct.destinationKey != null) {
          oprot.writeFieldBegin(DESTINATION_KEY_FIELD_DESC);
          oprot.writeString(struct.destinationKey);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyBlob_argsTupleSchemeFactory implements SchemeFactory {
      public copyBlob_argsTupleScheme getScheme() {
        return new copyBlob_argsTupleScheme();
      }
    }

    private static class copyBlob_argsTupleScheme extends TupleScheme<copyBlob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSourceBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetSourceKey()) {
          optionals.set(1);
        }
        if (struct.isSetDestinationBucketName()) {
          optionals.set(2);
        }
        if (struct.isSetDestinationKey()) {
          optionals.set(3);
        }
        if (struct.isSetSecurity()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSourceBucketName()) {
          oprot.writeString(struct.sourceBucketName);
        }
        if (struct.isSetSourceKey()) {
          oprot.writeString(struct.sourceKey);
        }
        if (struct.isSetDestinationBucketName()) {
          oprot.writeString(struct.destinationBucketName);
        }
        if (struct.isSetDestinationKey()) {
          oprot.writeString(struct.destinationKey);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyBlob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.sourceBucketName = iprot.readString();
          struct.setSourceBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceKey = iprot.readString();
          struct.setSourceKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.destinationBucketName = iprot.readString();
          struct.setDestinationBucketNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.destinationKey = iprot.readString();
          struct.setDestinationKeyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class copyBlob_result implements org.apache.thrift.TBase<copyBlob_result, copyBlob_result._Fields>, java.io.Serializable, Cloneable, Comparable<copyBlob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyBlob_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyBlob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyBlob_resultTupleSchemeFactory());
    }

    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyBlob_result.class, metaDataMap);
    }

    public copyBlob_result() {
    }

    public copyBlob_result(
      BlobException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyBlob_result(copyBlob_result other) {
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public copyBlob_result deepCopy() {
      return new copyBlob_result(this);
    }

    @Override
    public void clear() {
      this.error = null;
    }

    public BlobException getError() {
      return this.error;
    }

    public copyBlob_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyBlob_result)
        return this.equals((copyBlob_result)that);
      return false;
    }

    public boolean equals(copyBlob_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(copyBlob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyBlob_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyBlob_resultStandardSchemeFactory implements SchemeFactory {
      public copyBlob_resultStandardScheme getScheme() {
        return new copyBlob_resultStandardScheme();
      }
    }

    private static class copyBlob_resultStandardScheme extends StandardScheme<copyBlob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyBlob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyBlob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyBlob_resultTupleSchemeFactory implements SchemeFactory {
      public copyBlob_resultTupleScheme getScheme() {
        return new copyBlob_resultTupleScheme();
      }
    }

    private static class copyBlob_resultTupleScheme extends TupleScheme<copyBlob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyBlob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class createBucket_args implements org.apache.thrift.TBase<createBucket_args, createBucket_args._Fields>, java.io.Serializable, Cloneable, Comparable<createBucket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBucket_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBucket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBucket_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      VISIBILITY((short)2, "visibility"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // VISIBILITY
            return VISIBILITY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBucket_args.class, metaDataMap);
    }

    public createBucket_args() {
    }

    public createBucket_args(
      String bucketName,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBucket_args(createBucket_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public createBucket_args deepCopy() {
      return new createBucket_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.visibility = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public createBucket_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public createBucket_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public createBucket_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBucket_args)
        return this.equals((createBucket_args)that);
      return false;
    }

    public boolean equals(createBucket_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_visibility = true && (isSetVisibility());
      builder.append(present_visibility);
      if (present_visibility)
        builder.append(visibility);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createBucket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBucket_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBucket_argsStandardSchemeFactory implements SchemeFactory {
      public createBucket_argsStandardScheme getScheme() {
        return new createBucket_argsStandardScheme();
      }
    }

    private static class createBucket_argsStandardScheme extends StandardScheme<createBucket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBucket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBucket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBucket_argsTupleSchemeFactory implements SchemeFactory {
      public createBucket_argsTupleScheme getScheme() {
        return new createBucket_argsTupleScheme();
      }
    }

    private static class createBucket_argsTupleScheme extends TupleScheme<createBucket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBucket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetVisibility()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBucket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class createBucket_result implements org.apache.thrift.TBase<createBucket_result, createBucket_result._Fields>, java.io.Serializable, Cloneable, Comparable<createBucket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBucket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBucket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBucket_resultTupleSchemeFactory());
    }

    public String success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBucket_result.class, metaDataMap);
    }

    public createBucket_result() {
    }

    public createBucket_result(
      String success,
      BlobException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBucket_result(createBucket_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public createBucket_result deepCopy() {
      return new createBucket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createBucket_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlobException getError() {
      return this.error;
    }

    public createBucket_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBucket_result)
        return this.equals((createBucket_result)that);
      return false;
    }

    public boolean equals(createBucket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createBucket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBucket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBucket_resultStandardSchemeFactory implements SchemeFactory {
      public createBucket_resultStandardScheme getScheme() {
        return new createBucket_resultStandardScheme();
      }
    }

    private static class createBucket_resultStandardScheme extends StandardScheme<createBucket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBucket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBucket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBucket_resultTupleSchemeFactory implements SchemeFactory {
      public createBucket_resultTupleScheme getScheme() {
        return new createBucket_resultTupleScheme();
      }
    }

    private static class createBucket_resultTupleScheme extends TupleScheme<createBucket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBucket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBucket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class deleteBucket_args implements org.apache.thrift.TBase<deleteBucket_args, deleteBucket_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBucket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBucket_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBucket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBucket_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBucket_args.class, metaDataMap);
    }

    public deleteBucket_args() {
    }

    public deleteBucket_args(
      String bucketName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBucket_args(deleteBucket_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public deleteBucket_args deepCopy() {
      return new deleteBucket_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public deleteBucket_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public deleteBucket_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBucket_args)
        return this.equals((deleteBucket_args)that);
      return false;
    }

    public boolean equals(deleteBucket_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteBucket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBucket_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBucket_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBucket_argsStandardScheme getScheme() {
        return new deleteBucket_argsStandardScheme();
      }
    }

    private static class deleteBucket_argsStandardScheme extends StandardScheme<deleteBucket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBucket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBucket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBucket_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBucket_argsTupleScheme getScheme() {
        return new deleteBucket_argsTupleScheme();
      }
    }

    private static class deleteBucket_argsTupleScheme extends TupleScheme<deleteBucket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBucket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBucket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class deleteBucket_result implements org.apache.thrift.TBase<deleteBucket_result, deleteBucket_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBucket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBucket_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBucket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBucket_resultTupleSchemeFactory());
    }

    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBucket_result.class, metaDataMap);
    }

    public deleteBucket_result() {
    }

    public deleteBucket_result(
      BlobException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBucket_result(deleteBucket_result other) {
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public deleteBucket_result deepCopy() {
      return new deleteBucket_result(this);
    }

    @Override
    public void clear() {
      this.error = null;
    }

    public BlobException getError() {
      return this.error;
    }

    public deleteBucket_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBucket_result)
        return this.equals((deleteBucket_result)that);
      return false;
    }

    public boolean equals(deleteBucket_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(deleteBucket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBucket_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBucket_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBucket_resultStandardScheme getScheme() {
        return new deleteBucket_resultStandardScheme();
      }
    }

    private static class deleteBucket_resultStandardScheme extends StandardScheme<deleteBucket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBucket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBucket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBucket_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBucket_resultTupleScheme getScheme() {
        return new deleteBucket_resultTupleScheme();
      }
    }

    private static class deleteBucket_resultTupleScheme extends TupleScheme<deleteBucket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBucket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBucket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class doesBucketExist_args implements org.apache.thrift.TBase<doesBucketExist_args, doesBucketExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<doesBucketExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doesBucketExist_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doesBucketExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doesBucketExist_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doesBucketExist_args.class, metaDataMap);
    }

    public doesBucketExist_args() {
    }

    public doesBucketExist_args(
      String bucketName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doesBucketExist_args(doesBucketExist_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public doesBucketExist_args deepCopy() {
      return new doesBucketExist_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public doesBucketExist_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public doesBucketExist_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doesBucketExist_args)
        return this.equals((doesBucketExist_args)that);
      return false;
    }

    public boolean equals(doesBucketExist_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(doesBucketExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doesBucketExist_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doesBucketExist_argsStandardSchemeFactory implements SchemeFactory {
      public doesBucketExist_argsStandardScheme getScheme() {
        return new doesBucketExist_argsStandardScheme();
      }
    }

    private static class doesBucketExist_argsStandardScheme extends StandardScheme<doesBucketExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doesBucketExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doesBucketExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doesBucketExist_argsTupleSchemeFactory implements SchemeFactory {
      public doesBucketExist_argsTupleScheme getScheme() {
        return new doesBucketExist_argsTupleScheme();
      }
    }

    private static class doesBucketExist_argsTupleScheme extends TupleScheme<doesBucketExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doesBucketExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doesBucketExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class doesBucketExist_result implements org.apache.thrift.TBase<doesBucketExist_result, doesBucketExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<doesBucketExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doesBucketExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doesBucketExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doesBucketExist_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doesBucketExist_result.class, metaDataMap);
    }

    public doesBucketExist_result() {
    }

    public doesBucketExist_result(
      boolean success,
      BlobException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doesBucketExist_result(doesBucketExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public doesBucketExist_result deepCopy() {
      return new doesBucketExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public doesBucketExist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlobException getError() {
      return this.error;
    }

    public doesBucketExist_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doesBucketExist_result)
        return this.equals((doesBucketExist_result)that);
      return false;
    }

    public boolean equals(doesBucketExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(doesBucketExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doesBucketExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doesBucketExist_resultStandardSchemeFactory implements SchemeFactory {
      public doesBucketExist_resultStandardScheme getScheme() {
        return new doesBucketExist_resultStandardScheme();
      }
    }

    private static class doesBucketExist_resultStandardScheme extends StandardScheme<doesBucketExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doesBucketExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doesBucketExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doesBucketExist_resultTupleSchemeFactory implements SchemeFactory {
      public doesBucketExist_resultTupleScheme getScheme() {
        return new doesBucketExist_resultTupleScheme();
      }
    }

    private static class doesBucketExist_resultTupleScheme extends TupleScheme<doesBucketExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doesBucketExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doesBucketExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class doesBlobExist_args implements org.apache.thrift.TBase<doesBlobExist_args, doesBlobExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<doesBlobExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doesBlobExist_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doesBlobExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doesBlobExist_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public String key; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      KEY((short)2, "key"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // KEY
            return KEY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doesBlobExist_args.class, metaDataMap);
    }

    public doesBlobExist_args() {
    }

    public doesBlobExist_args(
      String bucketName,
      String key,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.key = key;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doesBlobExist_args(doesBlobExist_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public doesBlobExist_args deepCopy() {
      return new doesBlobExist_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.key = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public doesBlobExist_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public doesBlobExist_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public doesBlobExist_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case KEY:
        return getKey();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case KEY:
        return isSetKey();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doesBlobExist_args)
        return this.equals((doesBlobExist_args)that);
      return false;
    }

    public boolean equals(doesBlobExist_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(doesBlobExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doesBlobExist_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doesBlobExist_argsStandardSchemeFactory implements SchemeFactory {
      public doesBlobExist_argsStandardScheme getScheme() {
        return new doesBlobExist_argsStandardScheme();
      }
    }

    private static class doesBlobExist_argsStandardScheme extends StandardScheme<doesBlobExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doesBlobExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doesBlobExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doesBlobExist_argsTupleSchemeFactory implements SchemeFactory {
      public doesBlobExist_argsTupleScheme getScheme() {
        return new doesBlobExist_argsTupleScheme();
      }
    }

    private static class doesBlobExist_argsTupleScheme extends TupleScheme<doesBlobExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doesBlobExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doesBlobExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class doesBlobExist_result implements org.apache.thrift.TBase<doesBlobExist_result, doesBlobExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<doesBlobExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doesBlobExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doesBlobExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doesBlobExist_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doesBlobExist_result.class, metaDataMap);
    }

    public doesBlobExist_result() {
    }

    public doesBlobExist_result(
      boolean success,
      BlobException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doesBlobExist_result(doesBlobExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public doesBlobExist_result deepCopy() {
      return new doesBlobExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public doesBlobExist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlobException getError() {
      return this.error;
    }

    public doesBlobExist_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doesBlobExist_result)
        return this.equals((doesBlobExist_result)that);
      return false;
    }

    public boolean equals(doesBlobExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(doesBlobExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doesBlobExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doesBlobExist_resultStandardSchemeFactory implements SchemeFactory {
      public doesBlobExist_resultStandardScheme getScheme() {
        return new doesBlobExist_resultStandardScheme();
      }
    }

    private static class doesBlobExist_resultStandardScheme extends StandardScheme<doesBlobExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doesBlobExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doesBlobExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doesBlobExist_resultTupleSchemeFactory implements SchemeFactory {
      public doesBlobExist_resultTupleScheme getScheme() {
        return new doesBlobExist_resultTupleScheme();
      }
    }

    private static class doesBlobExist_resultTupleScheme extends TupleScheme<doesBlobExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doesBlobExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doesBlobExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getBlobVisibility_args implements org.apache.thrift.TBase<getBlobVisibility_args, getBlobVisibility_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBlobVisibility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlobVisibility_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlobVisibility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlobVisibility_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public String key; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      KEY((short)2, "key"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // KEY
            return KEY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlobVisibility_args.class, metaDataMap);
    }

    public getBlobVisibility_args() {
    }

    public getBlobVisibility_args(
      String bucketName,
      String key,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.key = key;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlobVisibility_args(getBlobVisibility_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getBlobVisibility_args deepCopy() {
      return new getBlobVisibility_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.key = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public getBlobVisibility_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public getBlobVisibility_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getBlobVisibility_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case KEY:
        return getKey();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case KEY:
        return isSetKey();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlobVisibility_args)
        return this.equals((getBlobVisibility_args)that);
      return false;
    }

    public boolean equals(getBlobVisibility_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getBlobVisibility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlobVisibility_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlobVisibility_argsStandardSchemeFactory implements SchemeFactory {
      public getBlobVisibility_argsStandardScheme getScheme() {
        return new getBlobVisibility_argsStandardScheme();
      }
    }

    private static class getBlobVisibility_argsStandardScheme extends StandardScheme<getBlobVisibility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlobVisibility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlobVisibility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlobVisibility_argsTupleSchemeFactory implements SchemeFactory {
      public getBlobVisibility_argsTupleScheme getScheme() {
        return new getBlobVisibility_argsTupleScheme();
      }
    }

    private static class getBlobVisibility_argsTupleScheme extends TupleScheme<getBlobVisibility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlobVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlobVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getBlobVisibility_result implements org.apache.thrift.TBase<getBlobVisibility_result, getBlobVisibility_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBlobVisibility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlobVisibility_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlobVisibility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlobVisibility_resultTupleSchemeFactory());
    }

    public List<ezbake.base.thrift.Visibility> success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlobVisibility_result.class, metaDataMap);
    }

    public getBlobVisibility_result() {
    }

    public getBlobVisibility_result(
      List<ezbake.base.thrift.Visibility> success,
      BlobException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlobVisibility_result(getBlobVisibility_result other) {
      if (other.isSetSuccess()) {
        List<ezbake.base.thrift.Visibility> __this__success = new ArrayList<ezbake.base.thrift.Visibility>(other.success.size());
        for (ezbake.base.thrift.Visibility other_element : other.success) {
          __this__success.add(new ezbake.base.thrift.Visibility(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public getBlobVisibility_result deepCopy() {
      return new getBlobVisibility_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ezbake.base.thrift.Visibility> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ezbake.base.thrift.Visibility elem) {
      if (this.success == null) {
        this.success = new ArrayList<ezbake.base.thrift.Visibility>();
      }
      this.success.add(elem);
    }

    public List<ezbake.base.thrift.Visibility> getSuccess() {
      return this.success;
    }

    public getBlobVisibility_result setSuccess(List<ezbake.base.thrift.Visibility> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlobException getError() {
      return this.error;
    }

    public getBlobVisibility_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ezbake.base.thrift.Visibility>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlobVisibility_result)
        return this.equals((getBlobVisibility_result)that);
      return false;
    }

    public boolean equals(getBlobVisibility_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getBlobVisibility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlobVisibility_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlobVisibility_resultStandardSchemeFactory implements SchemeFactory {
      public getBlobVisibility_resultStandardScheme getScheme() {
        return new getBlobVisibility_resultStandardScheme();
      }
    }

    private static class getBlobVisibility_resultStandardScheme extends StandardScheme<getBlobVisibility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlobVisibility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ezbake.base.thrift.Visibility>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ezbake.base.thrift.Visibility _elem10;
                    _elem10 = new ezbake.base.thrift.Visibility();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlobVisibility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ezbake.base.thrift.Visibility _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlobVisibility_resultTupleSchemeFactory implements SchemeFactory {
      public getBlobVisibility_resultTupleScheme getScheme() {
        return new getBlobVisibility_resultTupleScheme();
      }
    }

    private static class getBlobVisibility_resultTupleScheme extends TupleScheme<getBlobVisibility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlobVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ezbake.base.thrift.Visibility _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlobVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ezbake.base.thrift.Visibility>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ezbake.base.thrift.Visibility _elem15;
              _elem15 = new ezbake.base.thrift.Visibility();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getBucketVisibility_args implements org.apache.thrift.TBase<getBucketVisibility_args, getBucketVisibility_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBucketVisibility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBucketVisibility_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBucketVisibility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBucketVisibility_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBucketVisibility_args.class, metaDataMap);
    }

    public getBucketVisibility_args() {
    }

    public getBucketVisibility_args(
      String bucketName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBucketVisibility_args(getBucketVisibility_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getBucketVisibility_args deepCopy() {
      return new getBucketVisibility_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public getBucketVisibility_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getBucketVisibility_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBucketVisibility_args)
        return this.equals((getBucketVisibility_args)that);
      return false;
    }

    public boolean equals(getBucketVisibility_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getBucketVisibility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBucketVisibility_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBucketVisibility_argsStandardSchemeFactory implements SchemeFactory {
      public getBucketVisibility_argsStandardScheme getScheme() {
        return new getBucketVisibility_argsStandardScheme();
      }
    }

    private static class getBucketVisibility_argsStandardScheme extends StandardScheme<getBucketVisibility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBucketVisibility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBucketVisibility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBucketVisibility_argsTupleSchemeFactory implements SchemeFactory {
      public getBucketVisibility_argsTupleScheme getScheme() {
        return new getBucketVisibility_argsTupleScheme();
      }
    }

    private static class getBucketVisibility_argsTupleScheme extends TupleScheme<getBucketVisibility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBucketVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBucketVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getBucketVisibility_result implements org.apache.thrift.TBase<getBucketVisibility_result, getBucketVisibility_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBucketVisibility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBucketVisibility_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBucketVisibility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBucketVisibility_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.Visibility success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBucketVisibility_result.class, metaDataMap);
    }

    public getBucketVisibility_result() {
    }

    public getBucketVisibility_result(
      ezbake.base.thrift.Visibility success,
      BlobException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBucketVisibility_result(getBucketVisibility_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.base.thrift.Visibility(other.success);
      }
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public getBucketVisibility_result deepCopy() {
      return new getBucketVisibility_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
    }

    public ezbake.base.thrift.Visibility getSuccess() {
      return this.success;
    }

    public getBucketVisibility_result setSuccess(ezbake.base.thrift.Visibility success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlobException getError() {
      return this.error;
    }

    public getBucketVisibility_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.base.thrift.Visibility)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBucketVisibility_result)
        return this.equals((getBucketVisibility_result)that);
      return false;
    }

    public boolean equals(getBucketVisibility_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getBucketVisibility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBucketVisibility_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBucketVisibility_resultStandardSchemeFactory implements SchemeFactory {
      public getBucketVisibility_resultStandardScheme getScheme() {
        return new getBucketVisibility_resultStandardScheme();
      }
    }

    private static class getBucketVisibility_resultStandardScheme extends StandardScheme<getBucketVisibility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBucketVisibility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.base.thrift.Visibility();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBucketVisibility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBucketVisibility_resultTupleSchemeFactory implements SchemeFactory {
      public getBucketVisibility_resultTupleScheme getScheme() {
        return new getBucketVisibility_resultTupleScheme();
      }
    }

    private static class getBucketVisibility_resultTupleScheme extends TupleScheme<getBucketVisibility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBucketVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBucketVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.base.thrift.Visibility();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class listBuckets_args implements org.apache.thrift.TBase<listBuckets_args, listBuckets_args._Fields>, java.io.Serializable, Cloneable, Comparable<listBuckets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBuckets_args");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBuckets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBuckets_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_args.class, metaDataMap);
    }

    public listBuckets_args() {
    }

    public listBuckets_args(
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBuckets_args(listBuckets_args other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public listBuckets_args deepCopy() {
      return new listBuckets_args(this);
    }

    @Override
    public void clear() {
      this.security = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public listBuckets_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBuckets_args)
        return this.equals((listBuckets_args)that);
      return false;
    }

    public boolean equals(listBuckets_args that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(listBuckets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBuckets_args(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBuckets_argsStandardSchemeFactory implements SchemeFactory {
      public listBuckets_argsStandardScheme getScheme() {
        return new listBuckets_argsStandardScheme();
      }
    }

    private static class listBuckets_argsStandardScheme extends StandardScheme<listBuckets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBuckets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBuckets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBuckets_argsTupleSchemeFactory implements SchemeFactory {
      public listBuckets_argsTupleScheme getScheme() {
        return new listBuckets_argsTupleScheme();
      }
    }

    private static class listBuckets_argsTupleScheme extends TupleScheme<listBuckets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBuckets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBuckets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class listBuckets_result implements org.apache.thrift.TBase<listBuckets_result, listBuckets_result._Fields>, java.io.Serializable, Cloneable, Comparable<listBuckets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBuckets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBuckets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBuckets_resultTupleSchemeFactory());
    }

    public Set<String> success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_result.class, metaDataMap);
    }

    public listBuckets_result() {
    }

    public listBuckets_result(
      Set<String> success,
      BlobException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBuckets_result(listBuckets_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public listBuckets_result deepCopy() {
      return new listBuckets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public listBuckets_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlobException getError() {
      return this.error;
    }

    public listBuckets_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBuckets_result)
        return this.equals((listBuckets_result)that);
      return false;
    }

    public boolean equals(listBuckets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(listBuckets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBuckets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBuckets_resultStandardSchemeFactory implements SchemeFactory {
      public listBuckets_resultStandardScheme getScheme() {
        return new listBuckets_resultStandardScheme();
      }
    }

    private static class listBuckets_resultStandardScheme extends StandardScheme<listBuckets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBuckets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set16.size);
                  for (int _i17 = 0; _i17 < _set16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBuckets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBuckets_resultTupleSchemeFactory implements SchemeFactory {
      public listBuckets_resultTupleScheme getScheme() {
        return new listBuckets_resultTupleScheme();
      }
    }

    private static class listBuckets_resultTupleScheme extends TupleScheme<listBuckets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBuckets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBuckets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set21.size);
            for (int _i22 = 0; _i22 < _set21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class listBlobs_args implements org.apache.thrift.TBase<listBlobs_args, listBlobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<listBlobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBlobs_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBlobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBlobs_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBlobs_args.class, metaDataMap);
    }

    public listBlobs_args() {
    }

    public listBlobs_args(
      String bucketName,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBlobs_args(listBlobs_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public listBlobs_args deepCopy() {
      return new listBlobs_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public listBlobs_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public listBlobs_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBlobs_args)
        return this.equals((listBlobs_args)that);
      return false;
    }

    public boolean equals(listBlobs_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(listBlobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBlobs_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBlobs_argsStandardSchemeFactory implements SchemeFactory {
      public listBlobs_argsStandardScheme getScheme() {
        return new listBlobs_argsStandardScheme();
      }
    }

    private static class listBlobs_argsStandardScheme extends StandardScheme<listBlobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBlobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBlobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBlobs_argsTupleSchemeFactory implements SchemeFactory {
      public listBlobs_argsTupleScheme getScheme() {
        return new listBlobs_argsTupleScheme();
      }
    }

    private static class listBlobs_argsTupleScheme extends TupleScheme<listBlobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBlobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBlobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class listBlobs_result implements org.apache.thrift.TBase<listBlobs_result, listBlobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<listBlobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBlobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBlobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBlobs_resultTupleSchemeFactory());
    }

    public List<Blob> success; // required
    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Blob.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBlobs_result.class, metaDataMap);
    }

    public listBlobs_result() {
    }

    public listBlobs_result(
      List<Blob> success,
      BlobException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBlobs_result(listBlobs_result other) {
      if (other.isSetSuccess()) {
        List<Blob> __this__success = new ArrayList<Blob>(other.success.size());
        for (Blob other_element : other.success) {
          __this__success.add(new Blob(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public listBlobs_result deepCopy() {
      return new listBlobs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Blob> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Blob elem) {
      if (this.success == null) {
        this.success = new ArrayList<Blob>();
      }
      this.success.add(elem);
    }

    public List<Blob> getSuccess() {
      return this.success;
    }

    public listBlobs_result setSuccess(List<Blob> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlobException getError() {
      return this.error;
    }

    public listBlobs_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Blob>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBlobs_result)
        return this.equals((listBlobs_result)that);
      return false;
    }

    public boolean equals(listBlobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(listBlobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBlobs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBlobs_resultStandardSchemeFactory implements SchemeFactory {
      public listBlobs_resultStandardScheme getScheme() {
        return new listBlobs_resultStandardScheme();
      }
    }

    private static class listBlobs_resultStandardScheme extends StandardScheme<listBlobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBlobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Blob>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Blob _elem26;
                    _elem26 = new Blob();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBlobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Blob _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBlobs_resultTupleSchemeFactory implements SchemeFactory {
      public listBlobs_resultTupleScheme getScheme() {
        return new listBlobs_resultTupleScheme();
      }
    }

    private static class listBlobs_resultTupleScheme extends TupleScheme<listBlobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBlobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Blob _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBlobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Blob>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Blob _elem31;
              _elem31 = new Blob();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class setBucketVisibility_args implements org.apache.thrift.TBase<setBucketVisibility_args, setBucketVisibility_args._Fields>, java.io.Serializable, Cloneable, Comparable<setBucketVisibility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBucketVisibility_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBucketVisibility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBucketVisibility_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      VISIBILITY((short)2, "visibility"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // VISIBILITY
            return VISIBILITY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBucketVisibility_args.class, metaDataMap);
    }

    public setBucketVisibility_args() {
    }

    public setBucketVisibility_args(
      String bucketName,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBucketVisibility_args(setBucketVisibility_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public setBucketVisibility_args deepCopy() {
      return new setBucketVisibility_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.visibility = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public setBucketVisibility_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public setBucketVisibility_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public setBucketVisibility_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBucketVisibility_args)
        return this.equals((setBucketVisibility_args)that);
      return false;
    }

    public boolean equals(setBucketVisibility_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_visibility = true && (isSetVisibility());
      builder.append(present_visibility);
      if (present_visibility)
        builder.append(visibility);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(setBucketVisibility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBucketVisibility_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBucketVisibility_argsStandardSchemeFactory implements SchemeFactory {
      public setBucketVisibility_argsStandardScheme getScheme() {
        return new setBucketVisibility_argsStandardScheme();
      }
    }

    private static class setBucketVisibility_argsStandardScheme extends StandardScheme<setBucketVisibility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBucketVisibility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBucketVisibility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBucketVisibility_argsTupleSchemeFactory implements SchemeFactory {
      public setBucketVisibility_argsTupleScheme getScheme() {
        return new setBucketVisibility_argsTupleScheme();
      }
    }

    private static class setBucketVisibility_argsTupleScheme extends TupleScheme<setBucketVisibility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBucketVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetVisibility()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBucketVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class setBucketVisibility_result implements org.apache.thrift.TBase<setBucketVisibility_result, setBucketVisibility_result._Fields>, java.io.Serializable, Cloneable, Comparable<setBucketVisibility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBucketVisibility_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBucketVisibility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBucketVisibility_resultTupleSchemeFactory());
    }

    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBucketVisibility_result.class, metaDataMap);
    }

    public setBucketVisibility_result() {
    }

    public setBucketVisibility_result(
      BlobException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBucketVisibility_result(setBucketVisibility_result other) {
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public setBucketVisibility_result deepCopy() {
      return new setBucketVisibility_result(this);
    }

    @Override
    public void clear() {
      this.error = null;
    }

    public BlobException getError() {
      return this.error;
    }

    public setBucketVisibility_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBucketVisibility_result)
        return this.equals((setBucketVisibility_result)that);
      return false;
    }

    public boolean equals(setBucketVisibility_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(setBucketVisibility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBucketVisibility_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBucketVisibility_resultStandardSchemeFactory implements SchemeFactory {
      public setBucketVisibility_resultStandardScheme getScheme() {
        return new setBucketVisibility_resultStandardScheme();
      }
    }

    private static class setBucketVisibility_resultStandardScheme extends StandardScheme<setBucketVisibility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBucketVisibility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBucketVisibility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBucketVisibility_resultTupleSchemeFactory implements SchemeFactory {
      public setBucketVisibility_resultTupleScheme getScheme() {
        return new setBucketVisibility_resultTupleScheme();
      }
    }

    private static class setBucketVisibility_resultTupleScheme extends TupleScheme<setBucketVisibility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBucketVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBucketVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class setBlobVisibility_args implements org.apache.thrift.TBase<setBlobVisibility_args, setBlobVisibility_args._Fields>, java.io.Serializable, Cloneable, Comparable<setBlobVisibility_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBlobVisibility_args");

    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBlobVisibility_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBlobVisibility_argsTupleSchemeFactory());
    }

    public String bucketName; // required
    public String key; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_NAME((short)1, "bucketName"),
      KEY((short)2, "key"),
      VISIBILITY((short)3, "visibility"),
      SECURITY((short)4, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_NAME
            return BUCKET_NAME;
          case 2: // KEY
            return KEY;
          case 3: // VISIBILITY
            return VISIBILITY;
          case 4: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBlobVisibility_args.class, metaDataMap);
    }

    public setBlobVisibility_args() {
    }

    public setBlobVisibility_args(
      String bucketName,
      String key,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.bucketName = bucketName;
      this.key = key;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBlobVisibility_args(setBlobVisibility_args other) {
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public setBlobVisibility_args deepCopy() {
      return new setBlobVisibility_args(this);
    }

    @Override
    public void clear() {
      this.bucketName = null;
      this.key = null;
      this.visibility = null;
      this.security = null;
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public setBlobVisibility_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public setBlobVisibility_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public setBlobVisibility_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public setBlobVisibility_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_NAME:
        return getBucketName();

      case KEY:
        return getKey();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_NAME:
        return isSetBucketName();
      case KEY:
        return isSetKey();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBlobVisibility_args)
        return this.equals((setBlobVisibility_args)that);
      return false;
    }

    public boolean equals(setBlobVisibility_args that) {
      if (that == null)
        return false;

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_bucketName = true && (isSetBucketName());
      builder.append(present_bucketName);
      if (present_bucketName)
        builder.append(bucketName);

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_visibility = true && (isSetVisibility());
      builder.append(present_visibility);
      if (present_visibility)
        builder.append(visibility);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(setBlobVisibility_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBlobVisibility_args(");
      boolean first = true;

      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBlobVisibility_argsStandardSchemeFactory implements SchemeFactory {
      public setBlobVisibility_argsStandardScheme getScheme() {
        return new setBlobVisibility_argsStandardScheme();
      }
    }

    private static class setBlobVisibility_argsStandardScheme extends StandardScheme<setBlobVisibility_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBlobVisibility_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBlobVisibility_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBlobVisibility_argsTupleSchemeFactory implements SchemeFactory {
      public setBlobVisibility_argsTupleScheme getScheme() {
        return new setBlobVisibility_argsTupleScheme();
      }
    }

    private static class setBlobVisibility_argsTupleScheme extends TupleScheme<setBlobVisibility_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBlobVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBucketName()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetVisibility()) {
          optionals.set(2);
        }
        if (struct.isSetSecurity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBlobVisibility_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(3)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class setBlobVisibility_result implements org.apache.thrift.TBase<setBlobVisibility_result, setBlobVisibility_result._Fields>, java.io.Serializable, Cloneable, Comparable<setBlobVisibility_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBlobVisibility_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBlobVisibility_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBlobVisibility_resultTupleSchemeFactory());
    }

    public BlobException error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBlobVisibility_result.class, metaDataMap);
    }

    public setBlobVisibility_result() {
    }

    public setBlobVisibility_result(
      BlobException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBlobVisibility_result(setBlobVisibility_result other) {
      if (other.isSetError()) {
        this.error = new BlobException(other.error);
      }
    }

    public setBlobVisibility_result deepCopy() {
      return new setBlobVisibility_result(this);
    }

    @Override
    public void clear() {
      this.error = null;
    }

    public BlobException getError() {
      return this.error;
    }

    public setBlobVisibility_result setError(BlobException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((BlobException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBlobVisibility_result)
        return this.equals((setBlobVisibility_result)that);
      return false;
    }

    public boolean equals(setBlobVisibility_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_error = true && (isSetError());
      builder.append(present_error);
      if (present_error)
        builder.append(error);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(setBlobVisibility_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBlobVisibility_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBlobVisibility_resultStandardSchemeFactory implements SchemeFactory {
      public setBlobVisibility_resultStandardScheme getScheme() {
        return new setBlobVisibility_resultStandardScheme();
      }
    }

    private static class setBlobVisibility_resultStandardScheme extends StandardScheme<setBlobVisibility_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBlobVisibility_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new BlobException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBlobVisibility_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBlobVisibility_resultTupleSchemeFactory implements SchemeFactory {
      public setBlobVisibility_resultTupleScheme getScheme() {
        return new setBlobVisibility_resultTupleScheme();
      }
    }

    private static class setBlobVisibility_resultTupleScheme extends TupleScheme<setBlobVisibility_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBlobVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBlobVisibility_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new BlobException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

}
